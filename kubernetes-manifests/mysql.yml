---
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
  namespace: bankapp
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-statefulset
  namespace: bankapp
  labels:
    app: mysql
spec:
  serviceName: "mysql-svc"
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-MYSQL_ROOT_PASSWORD: "secret/data/mysql"
        vault.hashicorp.com/agent-inject-template-MYSQL_ROOT_PASSWORD: |
          {{- with secret "secret/data/mysql" -}}
          export MYSQL_ROOT_PASSWORD="{{ .Data.data.MYSQL_ROOT_PASSWORD }}"
          {{- end }}
        vault.hashicorp.com/agent-inject-secret-MYSQL_DATABASE: "secret/data/mysql"
        vault.hashicorp.com/agent-inject-template-MYSQL_DATABASE: |
          {{- with secret "secret/data/mysql" -}}
          export MYSQL_DATABASE="{{ .Data.data.MYSQL_DATABASE }}"
          {{- end }}
        vault.hashicorp.com/role: "vault-role"
    spec:
      securityContext:
        runAsUser: 999       # Recommended MySQL user ID
        runAsGroup: 999
        fsGroup: 999         # Ensures MySQL can write to mounted volumes
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: vault-auth
      containers:
        - name: mysql
          image: mysql:5.6
          ports:
            - containerPort: 3306
          env:
            - name: VAULT_SECRETS_INIT
              value: "true"
          command: ["/bin/sh", "-c"]
          args:
            - |
              while [ ! -s /vault/secrets/MYSQL_ROOT_PASSWORD ]; do echo 'Waiting for Vault secrets...'; sleep 2; done;
              chmod 600 /vault/secrets/MYSQL_ROOT_PASSWORD;
              chmod 600 /vault/secrets/MYSQL_DATABASE;
              source /vault/secrets/MYSQL_ROOT_PASSWORD;
              source /vault/secrets/MYSQL_DATABASE;
              export MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD;
              export MYSQL_DATABASE=$MYSQL_DATABASE;
              exec docker-entrypoint.sh mysqld
          volumeMounts:
            - name: mysql-vol
              mountPath: /var/lib/mysql
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec: 
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false     # MySQL needs write access, set to true only if volumes handle all writes
            capabilities:
              drop:
                - ALL

  volumeClaimTemplates:
  - metadata:
      name: mysql-vol
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi
      storageClassName: ebs-sc